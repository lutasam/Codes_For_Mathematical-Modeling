/* 
回溯算法求解最优路径
*/
#include <iostream>
#include <deque>
#define inf 0x3f3f3f3f
using namespace std;

// 参数设置
int point_num = 5; //图的结点数
int G[5][5] = { {inf, 3, 1, 4, inf} , // 图的路径权值
				{inf, inf, inf, inf, 6},
				{2, inf, inf, 3, inf},
				{inf, 3, inf, inf, 2},
				{inf, inf, inf, inf, inf } };
int visit[5] = { 1,0,0,0,0 }; // 起点设为1，其余为0
int start = 0; //出发点
int des = 4; //终点


int ans = inf;
deque<int> path;

void dfs(int sum, int now, deque<int> temp_path, int visit[]){
	if (now == des) {
		if (sum < ans) {
			ans = sum;
			while (!path.empty()) path.pop_front();
			int n = temp_path.size();
			for (int i = 0; i < n; i++) {
				int t = temp_path.front(); temp_path.pop_front();
				path.push_back(t);
			}
		}
	}
	else {
		for (int i = 0; i < point_num; i++) {
			if (G[now][i] < 10000 && !visit[i]) {
				visit[i] = 1;
				sum += G[now][i];
				temp_path.push_back(now);
				dfs(sum, i, temp_path, visit);
				temp_path.pop_back();
				visit[i] = 0;
			}
		}
	}
}

int main()
{
	dfs(0, start, deque<int>(), visit);
	printf("最短消耗为：%d\n", ans);
	printf("对应路径为：");
	while (!path.empty()) {
		int t = path.front(); path.pop_front();
		printf("%d -> ", t+1);
	}
	printf("%d", des+1);
	return 0;
}
